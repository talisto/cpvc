{"name":"Cpvc","tagline":"Composer.json Package Version Checker (cpvc)","body":"Composer.json Package Version Checker (cpvc)\r\n============================================\r\n\r\nDo you lock down your composer.json dependencies to a particular version for stability in your application,\r\nbut often wonder if there's new versions of your dependencies that you should be implementing?  \r\n\r\nThis small application/library will check your composer.json file, and output a table showing the latest version\r\nthat will be installed based on your \"require\" statements, as well as the latest version (of the same stability)\r\nof the package in the repository.  You can then compare the versions and investigate any updates to your\r\ndependencies for refactoring.\r\n\r\n### Sample output (CLI mode):\r\n\r\n    +-----------------------------+------------------+--------------------+\r\n    | Package                     | Required Version | Repository Version |\r\n    +-----------------------------+------------------+--------------------+\r\n    | * talisto/fake-repository   | 1.0.1            | 2.0.0              |\r\n    | talisto/fake-dev-repository | 2.5.1            | 2.5.1              |\r\n    +-----------------------------+------------------+--------------------+\r\n\r\nUsage\r\n-----\r\n\r\nYou can use this package as a library in your application, or a CLI app, or a web app.\r\n\r\n### Library Usage:\r\n\r\nFor a quick install with Composer use:\r\n\r\n    $ composer require talisto/cpvc\r\n    \r\nThen in your application, use the following:\r\n\r\n    use Talisto\\Composer\\VersionCheck\\Checker;\r\n    \r\n    $checker = new Checker('/path/to/your/composer.json');\r\n    $result = $checker->checkAll();\r\n\r\nThe `Checker()` constructor will take a [Doctrine Cache](https://github.com/doctrine/cache) object as the second\r\nparameter to cache the lookup results:\r\n\r\n    use Talisto\\Composer\\VersionCheck\\Checker;\r\n    use Doctrine\\Common\\Cache\\FilesystemCache;\r\n    \r\n    $cache = new FilesystemCache(sys_get_temp_dir());\r\n    $checker = new Checker('/path/to/your/composer.json', $cache);\r\n    $result = $checker->checkAll();\r\n\r\nThere is also an output formatter class that will take the results and output an HTML table:\r\n\r\n    use Talisto\\Composer\\VersionCheck\\Checker;\r\n    use Talisto\\Composer\\VersionCheck\\Formatter\\HTML as Formatter;\r\n    \r\n    $checker = new Checker('/path/to/your/composer.json');\r\n    $formatter = new Formatter;\r\n    echo $formatter->render($checker->checkAll());\r\n\r\nIf you only want to check a subset of your dependencies:\r\n\r\n    use Talisto\\Composer\\VersionCheck\\Checker;\r\n    use Talisto\\Composer\\VersionCheck\\Formatter\\HTML as Formatter;\r\n    \r\n    $checker = new Checker('/path/to/your/composer.json');\r\n    $packages = $checker->getPackageLinks();\r\n    $result = $checker->checkPackages(array(\r\n        'talisto/fake-repository' => $packages['talisto/fake-repository']\r\n    ));\r\n\r\n### CLI usage:\r\n\r\nThere are two ways to run the checker from the CLI.  You'll need to run `composer install` in the package root\r\nto install the dependencies before running the scripts.\r\n\r\n1.  *php script*:\r\n    `php cli/index.php`\r\n2.  *phar archive*:\r\n    `cd build; php create_phar.php; chmod u+x cpvc.phar; ./cpvc.phar`\r\n\r\nThe CLI script takes multiple parameters, run with `-h` for help:\r\n\r\n    Usage:\r\n     cpvc [--no-dev] [--no-cache] [path]\r\n    \r\n    Arguments:\r\n     path                  Path to composer.json (default: \"/Users/matt/Projects/cpvc/build\")\r\n    \r\n    Options:\r\n     --no-dev              Don't include dev dependencies.\r\n     --no-cache            Don't cache the results.\r\n     --help (-h)           Display this help message.\r\n     --quiet (-q)          Do not output any message.\r\n     --verbose (-v|vv|vvv) Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug.\r\n     --version (-V)        Display this application version.\r\n     --ansi                Force ANSI output.\r\n     --no-ansi             Disable ANSI output.\r\n     --no-interaction (-n) Do not ask any interactive question.\r\n\r\n### Web usage:\r\n\r\nThere is a simple index.php script in the `www` folder that will allow you to upload a `composer.json` file through\r\na web browser.  Just point your webserver to that folder.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}